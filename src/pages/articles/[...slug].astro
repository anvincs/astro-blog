---
import MainLayout from "../../layouts/MainLayout.astro";
import Tags from "../../components/Tags.astro";
import { formatDate } from "../../utils";

import { getEntry } from "astro:content";
const {slug} = Astro.params;

if(slug === undefined) {
    throw new Error("slug is required");
}

const entry = await getEntry("blog", slug);

if(entry === undefined) {
    return Astro.redirect("/404");
} 

const {Content} = await entry.render();
// to get the content of the entry, you have to call the render method

// ---------
// import { getCollection } from "astro:content";
// import type { CollectionEntry} from "astro:content";
// export async function  getStaticPaths()  {
//     const allBlogArticles: CollectionEntry<'blog'>[] = await getCollection("blog");
//     return allBlogArticles.map(entry => ({
//         params: {
//             slug: entry.slug
//         },
//         props: {
//             entry
//         }
//     }))
// }
// const {entry} = Astro.props;
// --------
// generate static paths for all entries in the collection
// only required for static sites
// no need for this if the page is server rendered
// if the page is server rendered, you have to change configuration in astro.config.mjs

---

<MainLayout>
    <a href="/articles" class="inline-block bg-gray-100 p-2 mb-6 hover:bg-indigo-500 hover:text-white">Back To Articles</a>
    <article>
    <h1 class="text-4xl font-bold mb-2">{entry.data.title}</h1>
    <h3 class="text-lg mb-2">Written by {entry.data.author} on {formatDate(entry.data.pubDate)}</h3>
    <Tags tags={entry.data.tags} />
    <img src={`/images/${entry.data.image}`} alt="Article Image" class="w-full h-auto rounded-xl my-6" />
    <Content />
    </article>
</MainLayout>


<!-- styles for the html tags created through markdown rendering since we can't apply tailwind classes on those -->
<style is:global>
    p {
        margin: 20px 0;
    }
    h2 {
        margin: 20px 0;
        font-size: 1.8rem
    }
</style>